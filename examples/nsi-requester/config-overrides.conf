include "application.conf"

application.secret = ${NSI_REQUESTER_APPLICATION_SECRET}

# Enable this value to use the original default SSL behavior instead of the new
# Play behavior when using HTTPS natively within the nsi-requester.  This
# controls client side behaviors so we can support 2 way TLS via the Java
# keystore.  With this option set to "true" you must specify the Java key and
# trust stores on the command line.  This is the only option if you want a
# standalone HTTPS server.
# ~~~~~
#ws.ssl.default = true

# With ws.ssl.default == false you can use the Play Framework's new WS client
# features for configuring the backend SSL/TLS sessions.  Use the ws.ssl.keyManager
# and ws.ssl.trustManager to configure the key and trust stores, or alternatively
# specify them on the command line. Additional WS client configuration information
# can be found at http://www.playframework.com/documentation/2.3.x/WsSSL
# ~~~~~
ws.ssl {
  default = false
  keyManager = {
    stores = [
      { path: "/config/nsi-requester-keystore.jks", type: "JKS", password: "secret" }
    ]
  }
  trustManager = {
    stores = [
      { path: "/config/nsi-requester-truststore.jks", type: "JKS", password = "secret" }
    ]
  }
}

# Configure the nsi-requester identity and available provider NSA.
# ~~~~~
requester {
  # Set "ssl" to "true" if you are using SSL natively within the nsi-requester.
  # This forces the https url into the replyto field of the NSI header, otherwise
  # it relies on the "X-Forwarded-Proto" HTTP header field to be set by the
  # fronting HTTP proxy.
  ssl = "false"

  # NSI specific configurations.
  nsi {
    # Unique identifier of the this NSA.  Use something uniquely named under
    # your network.
    requesterNsa = "urn:ogf:network:example.domain:2021:nsi-requester"

    # List of provider addresses made available in the settings menu.  This
    # list is specifically for SURFnet deployment using stunnel for SSL on
    # the back end.  If you are not using stunnel for backewnd SSL then you
    # need to populate the NSA's public provider URL.
    providers = [
      { id = "urn:ogf:network:example.domain:2017:nsa:safnari"
        url = "https://safnari.example.domain/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:example.domain:2021:topology:"
      }
    ]
  }
}
